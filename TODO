Possible Features:
	- `handlers.py` module to provide system-default apps for protocols like `http`, `mailto` etc.
	- Enable `background.py` to be run from within a ZIP file
	- Add `first_run()` to determine if the workflow has been run on this computer before.
		Save a "flag" in the data directory upon first run.
		Should the file only be created the first time `first_run()` is called instead?
		How about being able to pass a version argument to `first_run()`?

	ui.py:
	Possibly provide access to dialog boxes, notifications w/out having to use AppleScript
	NOTE: The bundler would obviate the need for this
	- Yes/no dialog
	- Text input
	- Select list
	- Notification center notifications

	filesearch.py:
	Interface to `mdfind`

	bundler.py:
	Integrate Shawn's bundler


General:
	- Move workflow into top-level directory to allow use as a Git submodule.
		Is this necessary? I have to copy stuff hither and thither all the time, but
		I'm the one developing the workflow package. Will this be such a problem for
		other developers?

		In this case, where would the docs go? They don't exist yet, but should, and
		including them in the workflow package would be antithetical to what I'm
		trying to achieve. They would just be a duplication of the comments in the
		source code in any case.
	- Add `setup.py` so `Alfred-Workflow` can be added to PyPi and installed with `pip`
	- Add explicit `save()` method to `Settings` @done(14-08-17 00:08)

background.py:
	- Add `stop_process()` function.
		Allow `killing` of running processes. Can be used for stopping servers.

web.py:


workflow.py:
	- automatically add `lib` and/or `packages` subdirectory to `sys.path`?
	- move "magic" args to class-level dictionary, so authors can add their own.
	- optimise `filter` by memoising expensive operations, e.g. `pattern`/`search` generation @done(14-05-11 23:13)


Docs:
	- Add tutorial using `workflow.web`
	- Add tutorial using filesystem/Unicode

＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
- add `openterminal` magic arg. @done(14-03-08 00:05)
 @project(workflow.py)
- Add unit tests @done(14-03-02 01:23)
 @project(web.py)
- Normalise Unicode @done(14-03-06 20:34)
 @project(web.py)
- Add unit tests @done(14-03-03 03:20)
 @project(workflow.py)
- Give log file more unique name @done(14-02-27 23:01)
 @project(workflow.py)
bundleid.log?
- Add magic arguments for opening cache/data directories in Finder @done(14-03-05 00:10)
 @project(workflow.py)
- Add `workflowdir` method to match `datadir` and `cachedir`. @done(14-03-05 00:10)
 @project(workflow.py)
- Tests for `Workflow` Keychain methods @done(14-03-03 03:21)
 @project(workflow.py / Unit Tests)
- Tests for `Workflow.run` method @done(14-03-03 03:21)
 @project(workflow.py / Unit Tests)
- Tests for `Workflow` data caching methods @done(14-03-03 03:21)
 @project(workflow.py / Unit Tests)
- Update list of "magic" arguments in tutorial2.rst @done(14-03-07 19:02)
 @project(Docs)
- Add and adapt phyllisstein's `keychain` module @done(14-02-27 22:56)
 @project(Other)
https://github.com/phyllisstein/alp/blob/master/alp/keychain.py
Created own version
- Add and adapt phyllisstein's `fuzzy` module @done(14-02-27 22:56)
 @project(Other)
https://github.com/phyllisstein/alp/blob/master/alp/fuzzy.py
Created own version
